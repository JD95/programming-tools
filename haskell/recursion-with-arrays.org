#+TITLE: Recursion with Arrays
#+STARTUP: hidestar
#+STARTUP: indent

# latex options
#+OPTIONS: author:nil date:nil num:nil 
#+LATEX_HEADER: \usepackage[margin=1.5in]{geometry}
#+LATEX_HEADER: \usepackage{apacite}
#+LATEX_HEADER: \usepackage{setspace}

** Typical pattern

Recursion usually follows this pattern

#+BEGIN_SRC cpp
function(collection elems, function f, int index) {
  return stop_check(index) ? // End the recursion?
           f(elems, index) : // Operation on element 
           default_value;    // The base case
}
#+END_SRC

The above is psuedo code, not real C++

** all
Design a function that checks if all elements of an array pass a test

#+REVEAL: split
We can start from the template
#+BEGIN_SRC cpp
all(collection elems, function f, int index) {
  return stop_check(index) ? // End the recursion?
           f(elems, index) : // Operation on element 
           default_value;    // The base case
}
#+END_SRC

#+REVEAL: split
We want the results of the test, so 'all' should return a bool
#+BEGIN_SRC cpp
bool all(collection elems, function f, int index) {
  return stop_check(index) ? // End the recursion?
           f(elems, index) : // Operation on element 
           default_value;    // The base case
}
#+END_SRC

#+REVEAL: split
We know we're working over an array
#+BEGIN_SRC cpp
template <typename T, int n>
bool all(array<T, n> elems, function f, int index) {
  return stop_check(index) ? // End the recursion?
           f(elems, index) : // Operation on element 
           default_value;    // The base case
}
#+END_SRC

We use the template to generalize over any type of array and also extract to the size so it will work for any sized array

#+REVEAL: split
The function needs to take an element of the array and test it so it's signature would be =bool(T)=
#+BEGIN_SRC cpp
template <typename T, int n>
bool all(array<T, n> elems, function<bool(T)> f, int index) {
  return stop_check(index) ? // End the recursion?
           f(elems, index) : // Operation on element 
           default_value;    // The base case
}
#+END_SRC

#+REVEAL: split
The recursion should stop right before index = n
#+BEGIN_SRC cpp
template <typename T, int n>
bool all(array<T, n> elems, function<bool(T)> f, int index) {
  return index < n ?         // End the recursion?
           f(elems, index) : // Operation on element 
           default_value;    // The base case
}
#+END_SRC
we don't want to go until exactly n because the index is a position

#+REVEAL: split
If we assumed there were only two elements we could use && to combine the results
#+BEGIN_SRC cpp
template <typename T>
bool all(T current, T next, function<bool(T)> f) {
  return f(current) && f(next);

#+END_SRC

So we can do the same in our recursive step

#+BEGIN_SRC cpp
template <typename T, int n>
bool all(array<T, n> elems, function<bool(T)> f, int index) {
  return index < n ? 
           f(elems.at(index)) && all(elems, cond, index+1) : 
           default_value;    // The base case
}
#+END_SRC

The index must be increase so it accesses the next element

#+REVEAL: split
Finally we add in the default value
#+BEGIN_SRC cpp
template<typename T, int n>
bool all(array<T, n> elems, function<bool(T)> f, int index) {
  return index < n ? 
           f(elems.at(index)) && all(elems, f, index+1):
           true;
}

array<int, 5> numbers = { 2,4,6,8,10 };
array<int, 5> others = { 2,4,5,8,10 };
auto even = [](int n) { return n % 2 == 0; };

all(numbers, even, 0); // true 
all(others, even, 0);  // false
#+END_SRC


