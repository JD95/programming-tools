#+TITLE: Representing Data
#+STARTUP: hidestar
#+STARTUP: indent

# latex options
#+OPTIONS: author:nil date:nil num:nil 
#+LATEX_HEADER: \usepackage[margin=1.5in]{geometry}
#+LATEX_HEADER: \usepackage{apacite}
#+LATEX_HEADER: \usepackage{setspace}

Programming is the process of breaking down problems into pieces that a computer can understand. The most challenging aspect of this process is changing the way we thinking about problems and, on a more philosophical note, the world around us. Computers have no concept of what a tree is or how to render a webpage until we as the programmers define what these terms mean. In many ways, this is similar to translating from your native language into another, more formal, one.

At its most basic level, programming can be summed up in two questions: how can we represent the problem's nouns and how can we represent the problem's verbs? Nouns tell us *what* we're working with. Verbs tell us *what to do* with the nouns or how to make them.

More generally, there are quite a few useful similarities between langauge and programming:
 
|-----------+-----------------------|
| language  | programming           |
|-----------+-----------------------|
| noun      | data                  |
| verb      | function              |
| adverb    | higher order function |
| pronoun   | object                |
| adjective | interface             |
|-----------+-----------------------|

** Constants 

In programming nouns can take several forms depending on how much you know about the noun beforehand. If a value already known ahead of time, it can be represented with a constant. Constants are specific values like the number =5= or the word ="Hello"=. These are directly stated as part of the program and are the most constrained form of a noun.

Most programming languages, including C++, categorize different values in the following way:

| real world | C++ type |
|------------+----------|
| numbers    | int      |
| decimals   | float    |
| letters    | char     |
| text/words | string   |

Each of these different categories of values are called a =Type=. Types help tell the program what can and cannot be done with certain values. It wouldn't make sense for a person to try and send a text message with a bicycle and we'd like the same to be true in our programs as well. The four types listed above are not the only types we can work with while programming, but they are some the most primitive. All other types are combinations of these four types.

The first of these types =int= represents positive and negative whole numbers and can be expressed in a program like this:

#+BEGIN_SRC cpp
0
-1
4
239458459823459246
-123493952395923592359
#+END_SRC

=int= values are great for counting things or representing amounts. A few examples of real world =int= values are: ages, years, stars in a movie review, students in a classroom, etc.

The next category of values are =float= values. These values represent decimal numbers and can be expressed like this:

#+BEGIN_SRC cpp
0.0
.05
-1.214253235
12435.234
#+END_SRC

=float= values are great for representing percentages, positions, fractions, etc. Concepts like height, discounts, and money can be representing with this type.

Numbers are not the only values which can be represented on a computer. Any symbol on your keyboard can be represented using the =char= type. Typically, =char= values are used to represent letters and single digits. Any symbol surrounded by single quotes is a =char=. For example:

#+BEGIN_SRC cpp
'a'
'9'
'$'
'>'
':'
#+END_SRC

By grouping =char= values together we can make a =string=. The =string= type allows us to represent any amount of text within our programs. Names, addresses, dates, etc. are typically represented using this type. You can express a =string= by wrapping the text in double quotes like so:

#+BEGIN_SRC cpp
"Hello there fellow humans!"
"cost: 50, tax:96%, discount:0.5"
"<(-.-)>  (@_o)!!!"
#+END_SRC

Strings have a special value to represent no text, otherwise known as the "empty string" or =""=. There is no space between the quotes and is the same as an empty chat dialogue box or an empty searchbar.

Programs are essentially text files which people (mostly you) will have to read. In order to make our programs as easy to understand for humans, it is often useful to give better names for the values we want to use so they better capture the real world noun they are meant to represent. For example, instead of just saying =int=, one could say =Age=.

In C++, you can tell the computer to interpet a word as a type via the =using= keyword. The term =keyword= in programming refers to words that have predefined meanings within the given programming language. These keywords cannot be redefiend by the user.

Here we can see examples of =using= usage:

#+BEGIN_SRC cpp
using MarbleCount = int;
using StudentName = string;
using Discount = float;
using PlayerSymbol = char;
...
#+END_SRC

There are five parts to defining our own name for a =type=. The first part is the =using= keyword which tells the program that we intend to define a new name. The second part is the name we want to use. The third part is the $=$ sign. The fourth is the existing type which the name to the left of the $=$ symbol will actually mean. The final bit of syntax for this kind of statement is the =;=. Any kind of statement or step in a program will end in a semi-colon.  

Note that any names you add into your program cannot have any spaces or strange symbols. The rules for new names are as follows:
- the name *must* begin with a letter
- the name can only consist of letters, numbers, or the =_= symbol

Although, these primitive types can represent quite a bit on their own, they cannot represent *everything* we might want to program. In order to represent more complicated nouns like people or places, we'll need a way to group these values together into a new type.

#+BEGIN_SRC cpp
// definition of a struct
struct Person {
  int age;
  double height;
  string first_name;
  char middle_initial;
  string last_name;
  bool employed;
};

// creating a struct value
Person {30, 5.11, "Captain", 'J', "Sparrow", true}
#+END_SRC

In the first section of the above code we see a new type of statement. Here the code defines a =struct= or a collection of values. The syntax for =struct= definitions are as folows:
- the =struct= keyword
- the name of the new type (typically in upper case).
- the ={= symbol
- the different values in the =struct= which follow the pattern =type= then =name= ended with a =;=
- close the ={= with the =}= symbol
- semi-colon

The names given to the values within the =struct= are there so you can access the individual parts of a struct later on.

For example, if we assumed that the name $p$ referred to a =Person= value, we could access its members like this:

#+BEGIN_SRC cpp
p.age
p.height
p.first_name
#+END_SRC

The dot expressions can be read as =p's age= or =p's first_name=. While the dot value =.age= could potentially refer to the age of any =Person=, it has to be paired with a particular =Person= in order to be used.

The second part of the code above defines a constant =Person= value. Constructing a value of any =struct= can be done by giving a value for each of the different members of the type. Note that the order is important, it is the same as they are defined. First the age, which is an =int=, then the hieght, which is a =double=, etc. The ={}= symbols are generally associated with groups of values and are used in both definitions and expressions.

** Functions 

When a value isn't known ahead of time we can express it as a =function=. Functions are both a less specific version of a constant as well as a way to represent verbs.

In maths, functions represent "mappings" from some domain into some range/co-domain. For our purposes we can think of the "domain" as the types of values that are needed to create the value we want (the co-domain). For example, addition can be thought of as a function that takes two =int= values and creates another =int= value.

\[addition(x,y) = x + y\]

In order to translate this definition into C++ we need to follow these steps:
- determine what =type= of value you want to construct later on
- come up with some name for the process of making the value (the function)
- determine what other values might be needed and their =type=
- write out an expression that, given all the inputs, will construct the value you want

#+BEGIN_SRC cpp
int addition(int x, int y) {
  return x + y;
}
#+END_SRC

The above code is the implementation to the earlier math expression. The first part of the definition is the =type= of the value we'll construct later once we know what the inputs are. The second part is the name of the function so we can refer to our definition later. The third part is a comma seperated list of all the input values needed to make our result. 

These parts so far make up the "signature" of the function. This indicates all the information needed to use the function we've defined. It is a good idea first design the signature before trying to come up with the expression for the next part, the implementation.

The implementation of a function is the part surrounded by the curly braces. This section of the function defines the steps needed to construct the result. When the value is constructed we indicate this by using a =return= statement.

#+BEGIN_SRC cpp
int plus_five(int x) {
  return x + 5;
}

plus_five(10)
#+END_SRC

The above function specifices a way to construct an =int= value from another =int=. Once the value $x$ is known, =plus_five= will construct another =int= by adding five to $x$.

The second part uses the defined function to construct the value =15=. This is refered to as "calling" the function. Note that all which is needed to use the function is its name and a comma seperated list of the inputs.

#+BEGIN_SRC cpp
addition(1,2)
#+END_SRC

The above uses our previous defition of addition to construct =3=. The useful thing about functions is that they can work with data that doesn't exist until the program actual runs.

Functions are needed when certain values aren't known ahead of time. These unknown values become the inputs to the functions and the process of constructing these values are how =verbs= are represented in programming. All programs do is construct new values out of other values. For example, games construct images at 60 fps from values like player health, position, camera angles, etc. Many tasks within programming are similar and by defining more abstract expressions with functions we can end up reusing those definitions.

** templates

The final level of abstraction in C++ can be achieved with =templates=. These kinds of values are needed when nothing is known about a value except that you need a value. This allows for the definition of very abstract concepts like a pair.

#+BEGIN_SRC cpp
template <typename A, typename B>
struct Pair {
  A first;
  B second;
};

template<typename T>
T add_pair(Pair<T> p) {
  return p.first + p.second;
}

#+END_SRC

=template= values can be thought of as functions which take a =type= and return other =types=. In the above code we define a struct =Pair= which can hold a pair of *any* two types.

There are three parts to a template definition:
- the keyword =template=
- a comma seperated list of =types=, with each of the types preceeded by the keyword =typename=
- the definition that uses the input types

Templates are often used to define either very abstract concepts or used to make tools for programmers. Most programming languages will have a collection of templated functions and types which save the programmer time by defining concepts beforehand. For example, the =string= type in C++ is actually provided by a library.

** Summary

The first part of programming is determing how to break down a problem and then deciding how to represent the pieces. Any values which are known ahead of time can be defined with a constant. Any values which can't be constructed until other values are known (possibly when the program is run) can be defined by functions. Any values for which not even the =type= is known ahead of time can be defined by =templates=.
