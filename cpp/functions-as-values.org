#+TITLE: Functions as Values
#+STARTUP: hidestar
#+STARTUP: indent

# latex options
#+OPTIONS: author:nil date:nil num:nil
#+LATEX_HEADER: \usepackage[margin=1.5in]{geometry}
#+LATEX_HEADER: \usepackage{apacite}
#+LATEX_HEADER: \usepackage{setspace}

** C++ function variables

#+BEGIN_SRC cpp
auto add = [] (int x, int y)  { return  x + y; };
#+END_SRC

[[./images/functions-as-values/lambda-value.png]]

#+REVEAL: split
#+BEGIN_SRC cpp
auto add = [] (int x, int y)  { return  x + y; };
int x = add(5,5);
#+END_SRC

[[./images/functions-as-values/lambda-no-capture-eval-1.png]]

#+REVEAL: split
[[./images/functions-as-values/lambda-no-capture-eval-2.png]]

#+REVEAL: split
[[./images/functions-as-values/lambda-no-capture-eval-3.png]]

#+REVEAL: split
[[./images/functions-as-values/lambda-no-capture-eval-4.png]]

#+REVEAL: split
[[./images/functions-as-values/lambda-no-capture-eval-5.png]]

** lambda capture
#+BEGIN_SRC cpp
int x = 10;
auto addX = [x](int y) { return x + y; };
#+END_SRC

[[./images/functions-as-values/lambda-capture-by-value.png]]

#+REVEAL: split
#+BEGIN_SRC cpp
int x = 10;
auto addX = [&x](int y) { return x + y; };
#+END_SRC

[[./images/functions-as-values/lambda-capture-by-reference.png]]

*** Capture Practice 1
#+BEGIN_SRC cpp
int x = 10;
int y = 5;
int z = 22;
auto f = [???]() { return x + y + z; };
#+END_SRC
What needs to be captured?

#+REVEAL: split
#+BEGIN_SRC cpp
int x = 10;
int y = 5;
int z = 22;
auto f = [x,y,z]() { return x + y + z; };
#+END_SRC

*** Capture Practice 2
#+BEGIN_SRC cpp
int x = 10;
int y = 5;
int z = 22;
auto f = [???](int a) { return a + y + z; };
#+END_SRC
What needs to be captured?

#+REVEAL: split
#+BEGIN_SRC cpp
int x = 10;
int y = 5;
int z = 22;
auto f = [y,z](int a) { return a + y + z; };
#+END_SRC

*** Capture Practice 3
#+BEGIN_SRC cpp
int x = 10;
int y = 5;
int z = 22;
auto f = [???](int a, int y) { return a + y + z; };
#+END_SRC
What needs to be captured?

#+REVEAL: split
#+BEGIN_SRC cpp
int x = 10;
int y = 5;
int z = 22;
auto f = [z](int a, int y) { return a + y + z; };
#+END_SRC

** passing functions to other functions
#+BEGIN_SRC cpp
#include <functional>

// the functional header is needed for the function type
int do_math(function<int(int,int)> op, const int& x, const int& y) {
  return op(x,y);
}

int add(int x, int y) { return x + y; };

do_math(add, 7, 3); // 10
#+END_SRC

#+REVEAL: split
[[./images/functions-as-values/passing-functions-1.png]]
#+REVEAL: split
[[./images/functions-as-values/passing-functions-2.png]]
#+REVEAL: split
[[./images/functions-as-values/passing-functions-3.png]]
#+REVEAL: split
[[./images/functions-as-values/passing-functions-4.png]]
#+REVEAL: split
[[./images/functions-as-values/passing-functions-5.png]]
#+REVEAL: split
[[./images/functions-as-values/passing-functions-6.png]]

** what are the uses of lambdas?

*** less repetition in code

#+BEGIN_SRC cpp
using Tag = string;
using HP = int;

struct Action {
  ...
};

struct Unit {
  ...
};

struct AiUnit {
  Tag id;
  HP hp;
  Unit* target;
  function<Action(Unit*, HP)> behavior;
};
#+END_SRC

The AiUnit can have its individual behavior swapped out by simply assigning a new function
